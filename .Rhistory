start_time_admin0 <- Sys.time()
final_result_admin_0 <- from_analysisplan_map_to_output(data = response_updated_cluster,
analysisplan = analysisplan_admin_0,
weighting = weighting_combined,
cluster_variable_name = "clusters",
questionnaire = questionnaire)
end_time_admin0 <- Sys.time()
summary.stats_admin0 <- final_result_admin_0$results %>%
lapply(function(x){x$summary.statistic}) %>% do.call(rbind, .)%>%
map_to_file(paste0("./output/tables/RAW/","summary_stats_admin0_RAW_",format(Sys.time(), "%Y%m%d"),".csv"))
summary.stats_admin0 <- final_result_admin_0$results %>%
lapply(function(x){x$summary.statistic}) %>% do.call(rbind, .)
summary.stats_admin0
final_result_admin_0
View(final_result_admin_0)
View(summary.stats_admin0)
getwd()
analysisplan_admin_0_grp <- make_analysis_plan_template(df= response_updated_cluster,
questionnaire = questionnaire,
repeat.for.variable = "admin_0",
independent.variable = "ig_8_statut_groupe",
hypothesis.type = "group_difference",
template_file = template_analysisplan_file
)
analysisplan_admin_0_grp <- analysisplan_admin_0_grp[!analysisplan_admin_0_grp$dependent.variable %in% unwanted_cols,]
analysisplan_admin_0_grp <- analysisplan_admin_0_grp[!is.na(analysisplan_admin_0_grp$dependent.variable.type),]
# To analyse only one variable :
# analysisplan_admin_0_grp <- analysisplan_admin_0_grp[(analysisplan_admin_0_grp$dependent.variable == "score_nfi_tot") ,]
start_time_admin0_grp <- Sys.time()
final_result_admin_0_grp <- from_analysisplan_map_to_output(data = response_updated_cluster,
analysisplan = analysisplan_admin_0_grp,
weighting = weighting_combined,
cluster_variable_name = "clusters",
questionnaire = questionnaire)
end_time_admin0_grp <- Sys.time()
summary.stats_admin0_grp <- final_result_admin_0_grp$results %>%
lapply(function(x){x$summary.statistic}) %>% do.call(rbind, .)%>%
map_to_file(paste0("./output/tables/RAW/","summary_stats_admin0_grp_RAW_",format(Sys.time(), "%Y%m%d"),".csv"))
#### ADMIN 0 sex HHD
analysisplan_admin_0_sexHHD <- make_analysis_plan_template(df= response_updated_cluster,
questionnaire = questionnaire,
repeat.for.variable = "admin_0",
independent.variable = "sexe_chef_menage",
hypothesis.type = "group_difference",
template_file = template_analysisplan_file
)
analysisplan_admin_0_sexHHD <- analysisplan_admin_0_sexHHD[!analysisplan_admin_0_sexHHD$dependent.variable %in% unwanted_cols,]
analysisplan_admin_0_sexHHD <- analysisplan_admin_0_sexHHD[!is.na(analysisplan_admin_0_sexHHD$dependent.variable.type),]
# To analyse only one variable :
# analysisplan_admin_0_sexHHD <- analysisplan_admin_0_sexHHD[(analysisplan_admin_0_sexHHD$dependent.variable == "score_nfi_tot") ,]
start_time_admin0_sexHHD <- Sys.time()
final_result_admin_0_sexHHD <- from_analysisplan_map_to_output(data = response_updated_cluster,
analysisplan = analysisplan_admin_0_sexHHD,
weighting = weighting_combined,
cluster_variable_name = "clusters",
questionnaire = questionnaire)
end_time_admin0_sexHHD <- Sys.time()
summary.stats_admin0_sexHHD <- final_result_admin_0_sexHHD$results %>%
lapply(function(x){x$summary.statistic}) %>% do.call(rbind, .)%>%
map_to_file(paste0("./output/tables/RAW/","summary_stats_admin0_sexHHD_RAW_",format(Sys.time(), "%Y%m%d"),".csv"))
#### ADMIN 1 ####
analysisplan_admin_1 <- make_analysis_plan_template(df= response_updated_cluster,
repeat.for.variable = "admin_1",
questionnaire = questionnaire,
hypothesis.type = "direct_reporting",
template_file = template_analysisplan_file
)
analysisplan_admin_1 <- analysisplan_admin_1[!row.names(analysisplan_admin_1) %in% unwanted_cols,]
analysisplan_admin_1 <- analysisplan_admin_1[!is.na(analysisplan_admin_1$dependent.variable.type),]
# To analyse only one variable :
# analysisplan_admin_1 <- analysisplan_admin_1[(analysisplan_admin_1$dependent.variable == "score_nfi_tot") ,]
start_time_admin1 <- Sys.time()
final_result_admin_1 <- from_analysisplan_map_to_output(data = response_updated_cluster,
analysisplan = analysisplan_admin_1,
weighting = weighting_combined,
cluster_variable_name = "clusters",
questionnaire = questionnaire)
end_time_admin1 <- Sys.time()
summary.stats_admin1 <- final_result_admin_1$results %>%
lapply(function(x){x$summary.statistic}) %>% do.call(rbind, .)%>%
map_to_file(paste0("./output/tables/RAW/","summary_stats_admin1_RAW_",format(Sys.time(), "%Y%m%d"),".csv"))
#### ADMIN 1 GROUPE ####
analysisplan_admin_1_grp <- make_analysis_plan_template(df= response_updated_cluster,
questionnaire = questionnaire,
repeat.for.variable = "admin_1",
independent.variable = "ig_8_statut_groupe",
hypothesis.type = "group_difference",
template_file = template_analysisplan_file
)
analysisplan_admin_1_grp <- analysisplan_admin_1_grp[!analysisplan_admin_1_grp$dependent.variable %in% unwanted_cols,]
analysisplan_admin_1_grp <- analysisplan_admin_1_grp[!is.na(analysisplan_admin_1_grp$dependent.variable.type),]
# To analyse only one variable :
# analysisplan_admin_1_grp <- analysisplan_admin_1_grp[(analysisplan_admin_1_grp$dependent.variable == "score_nfi_tot") ,]
start_time_admin1_grp <- Sys.time()
final_result_admin_1_grp <- from_analysisplan_map_to_output(data = response_updated_cluster,
analysisplan = analysisplan_admin_1_grp,
weighting = weighting_combined,
cluster_variable_name = "clusters",
questionnaire = questionnaire)
end_time_admin1_grp <- Sys.time()
summary.stats_admin1_grp <- final_result_admin_1_grp$results %>%
lapply(function(x){x$summary.statistic}) %>% do.call(rbind, .)%>%
map_to_file(paste0("./output/tables/RAW/","summary_stats_admin1_grp_RAW_",format(Sys.time(), "%Y%m%d"),".csv"))
#### ADMIN 2 ####
# response_updated_cluster = subset(response_updated_cluster, response_updated_cluster$admin2_labels == "Bangui")
# response_updated_cluster$admin_2 = if_else(response_updated_cluster$localite_final_labels_admin2 == "bangui3ebangui", "Bangui_3e", "Bangui_245678e")
analysisplan_admin_2 <- make_analysis_plan_template(df= response_updated_cluster,
repeat.for.variable = "admin_2",
questionnaire = questionnaire,
hypothesis.type = "direct_reporting",
template_file = template_analysisplan_file
)
analysisplan_admin_2 <- analysisplan_admin_2[!analysisplan_admin_2$dependent.variable %in% unwanted_cols,]
analysisplan_admin_2 <- analysisplan_admin_2[!is.na(analysisplan_admin_2$dependent.variable.type),]
# To analyse only one variable :
# analysisplan_admin_2 <- analysisplan_admin_2[(analysisplan_admin_2$dependent.variable == "score_nfi_tot") ,]
start_time_admin2 <- Sys.time()
final_result_admin_2 <- from_analysisplan_map_to_output(data = response_updated_cluster,
analysisplan = analysisplan_admin_2,
weighting = weighting_combined,
cluster_variable_name = "clusters",
questionnaire = questionnaire)
end_time_admin2 <- Sys.time()
summary.stats_admin2 <- final_result_admin_2$results %>%
lapply(function(x){x$summary.statistic}) %>% do.call(rbind, .)%>%
map_to_file(paste0("./output/tables/RAW/","summary_stats_admin2_RAW_",format(Sys.time(), "%Y%m%d"),".csv"))
running_timezz <- data.frame(matrix(ncol = 4, nrow = 6) )
names(running_timezz) <- c("Level", "Start", "End", "Running_time")
running_timezz$Level <- c("admin0", "admin0_grp", "admin0_sexHHD", "admin1", "admin1_grp", "admin2")
running_timezz$Start <- c(start_time_admin0, start_time_admin0_grp, start_time_admin0_sexHHD, start_time_admin1, start_time_admin1_grp, start_time_admin2)
running_timezz$End <- c(end_time_admin0, end_time_admin0_grp, end_time_admin0_sexHHD, end_time_admin1, end_time_admin1_grp, end_time_admin2)
running_timezz <- running_timezz%>%
mutate(Start = as.POSIXct(Start))%>%
mutate(End = as.POSIXct(End))%>%
mutate(Running_time = difftime(End, Start))
running_timezz
library(tidyverse)
source("functions/borda_count.R")
df_hh <- read_csv("output/MSNA_HH_Analysed_data20191209.csv")
df_hh <- read_csv("output/MSNA_HH_Analysed_data20191211.csv")
borda_script_template <- read_csv("input/borda_analysis.csv")
borda_script_template <- read_csv("input/borda_analysis.csv")
borda_script_admin0 <- borda_script_template%>%
mutate(
disaggregate = NA,
repeat_var = "admin_0"
)
borda_applier(borda_script_admin0, df_hh, weighting_function = weighting_combined) %>%
write_csv("output/borda/borda_admin0_test.csv",
na = "")
df_hh <- read_csv("output/REACH_CAR_dataset_HH_MSNA_20191211_weights_ok.csv")
source("functions/borda_count.R")
#### TO BE MODIFIED
#df_hh <- read.csv(paste0("./output/REACH_CAR_dataset_HH_MSNA_20191210.csv"), stringsAsFactors = FALSE)
df_hh <- read.csv("output/REACH_CAR_dataset_HH_MSNA_20191211_weights_ok.csv", stringsAsFactors = FALSE)
borda_script_template <- read_csv("input/borda_analysis.csv")
borda_script_admin0 <- borda_script_template%>%
mutate(
disaggregate = NA,
repeat_var = "admin_0"
)
borda_applier(borda_script_admin0, df_hh, weighting_function = weighting_combined) %>%
write_csv("output/borda/borda_admin0.csv",
na = "")
borda_applier(borda_script_admin0, df_hh, weighting_function = weighting_combined) %>%
write_csv("output/borda/borda_admin0.csv",
na = "")
borda_script_admin0_grp <- borda_script_template%>%
mutate(
disaggregate = "ig_8_statut_groupe",
repeat_var = "admin_0"
)
borda_applier(borda_script_admin0_grp, df_hh, weighting_function = weighting_combined) %>%
write_csv("output/borda/borda_admin0_grp.csv",
na = "")
borda_script_admin1 <- borda_script_template%>%
mutate(
disaggregate = NA,
repeat_var = "admin_1"
)
borda_applier(borda_script_admin1, df_hh, weighting_function = weighting_combined) %>%
write_csv("output/borda/borda_admin1.csv",
na = "")
borda_script_admin1_grp <- borda_script_template%>%
mutate(
disaggregate = "ig_8_statut_groupe",
repeat_var = "admin_1"
)
borda_applier(borda_script_admin1_grp, df_hh, weighting_function = weighting_combined) %>%
write_csv("output/borda/borda_admin1_grp.csv",
na = "")
borda_script_admin2 <- borda_script_template%>%
mutate(
disaggregate = NA,
repeat_var = "admin_2"
)
borda_applier(borda_script_admin2, df_hh, weighting_function = weighting_combined) %>%
write_csv("output/borda/borda_admin2.csv",
na = "")
borda_script_admin0_sex <- borda_script_template%>%
mutate(
disaggregate = "sexe_chef_menage",
repeat_var = "admin_0"
)
borda_applier(borda_script_admin0_sex, df_hh, weighting_function = weighting_combined) %>%
write_csv("output/borda/borda_admin0_sexHHD.csv",
na = "")
borda_admin0 <- read.csv(paste0("./output/borda/borda_admin0.csv"), stringsAsFactors = F)
borda_admin0_grp <- read.csv(paste0("./output/borda/borda_admin0_grp.csv"), stringsAsFactors = F)
borda_admin0_sexHHD <- read.csv(paste0("./output/borda/borda_admin0_sexHHD.csv"), stringsAsFactors = F)
borda_admin1 <- read.csv(paste0("./output/borda/borda_admin1.csv"), stringsAsFactors = F)
borda_admin1_grp <- read.csv(paste0("./output/borda/borda_admin1_grp.csv"), stringsAsFactors = F)
borda_admin2 <- read.csv(paste0("./output/borda/borda_admin2.csv"), stringsAsFactors = F)
### admin0
borda_admin0 <- borda_admin0%>%
separate(vars, into = c("question_1", "question_2", "question_3"), sep = " ")
borda_admin0_1 <- borda_admin0%>%
select(question_1, rank_1, percent_1, repeat_var, disaggregation)%>%
mutate(dependent.var =question_1, dependent.var.value = rank_1, independent.var="total", independent.var.value = "total",
repeat.var = repeat_var, repeat.var.value = "RCA", numbers = as.numeric(str_remove(percent_1, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin0_2 <- borda_admin0%>%
select(question_2, rank_2, percent_2, repeat_var, disaggregation)%>%
mutate(dependent.var =question_2, dependent.var.value = rank_2, independent.var="total", independent.var.value = "total",
repeat.var = repeat_var, repeat.var.value = "RCA", numbers = as.numeric(str_remove(percent_2, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin0_3 <- borda_admin0%>%
select(question_3, rank_3, percent_3, repeat_var, disaggregation)%>%
mutate(dependent.var =question_3, dependent.var.value = rank_3, independent.var="total", independent.var.value = "total",
repeat.var = repeat_var, repeat.var.value = "RCA", numbers = as.numeric(str_remove(percent_3, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin0 <- borda_admin0_1%>%
bind_rows(borda_admin0_2, borda_admin0_3)
### admin0 grp
borda_admin0_grp_all <- borda_admin0_grp%>%
separate(vars, into = c("question_1", "question_2", "question_3"), sep = " ")
borda_admin0_grp_1 <- borda_admin0_grp_all%>%
select(question_1, rank_1, percent_1, repeat_var, disaggregation)%>%
mutate(dependent.var =question_1, dependent.var.value = rank_1, independent.var="ig_8_statut_groupe", independent.var.value = disaggregation,
repeat.var = repeat_var, repeat.var.value = "RCA", numbers = as.numeric(str_remove(percent_1, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin0_grp_2 <- borda_admin0_grp_all%>%
select(question_2, rank_2, percent_2, repeat_var, disaggregation)%>%
mutate(dependent.var =question_2, dependent.var.value = rank_2, independent.var="ig_8_statut_groupe", independent.var.value = disaggregation,
repeat.var = repeat_var, repeat.var.value = "RCA", numbers = as.numeric(str_remove(percent_2, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin0_grp_3 <- borda_admin0_grp_all%>%
select(question_3, rank_3, percent_3, repeat_var, disaggregation)%>%
mutate(dependent.var =question_3, dependent.var.value = rank_3, independent.var="ig_8_statut_groupe", independent.var.value = disaggregation,
repeat.var = repeat_var, repeat.var.value = "RCA", numbers = as.numeric(str_remove(percent_3, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin0_grp <- borda_admin0_grp_1%>%
bind_rows(borda_admin0_grp_2, borda_admin0_grp_3)
### admin0 sexHHD
borda_admin0_sexHHD <- borda_admin0_sexHHD%>%
separate(vars, into = c("question_1", "question_2", "question_3"), sep = " ")
borda_admin0_sexHHD_1 <- borda_admin0_sexHHD%>%
select(question_1, rank_1, percent_1, repeat_var, disaggregation)%>%
mutate(dependent.var =question_1, dependent.var.value = rank_1, independent.var="sexe_chef_menage", independent.var.value = disaggregation,
repeat.var = repeat_var, repeat.var.value = "RCA", numbers = as.numeric(str_remove(percent_1, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin0_sexHHD_2 <- borda_admin0_sexHHD%>%
select(question_2, rank_2, percent_2, repeat_var, disaggregation)%>%
mutate(dependent.var =question_2, dependent.var.value = rank_2, independent.var="sexe_chef_menage", independent.var.value = disaggregation,
repeat.var = repeat_var, repeat.var.value = "RCA", numbers = as.numeric(str_remove(percent_2, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin0_sexHHD_3 <- borda_admin0_sexHHD%>%
select(question_3, rank_3, percent_3, repeat_var, disaggregation)%>%
mutate(dependent.var =question_3, dependent.var.value = rank_3, independent.var="sexe_chef_menage", independent.var.value = disaggregation,
repeat.var = repeat_var, repeat.var.value = "RCA", numbers = as.numeric(str_remove(percent_3, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin0_sexHHD <- borda_admin0_sexHHD_1%>%
bind_rows(borda_admin0_sexHHD_2, borda_admin0_sexHHD_3)
final_admin0_allborda <- borda_admin0 %>%
bind_rows(borda_admin0_grp, borda_admin0_sexHHD)
write.csv(final_admin0_allborda, paste0("./output/borda/admin_0_all_borda_aggregation", format(Sys.time(), "%Y%m%d"),".csv"))
borda_admin1 <- borda_admin1%>%
separate(vars, into = c("question_1", "question_2", "question_3"), sep = " ")
borda_admin1_1 <- borda_admin1%>%
select(question_1, rank_1, percent_1, repeat_var, disaggregation)%>%
mutate(dependent.var =question_1, dependent.var.value = rank_1, independent.var="total", independent.var.value = "total",
repeat.var.value = repeat_var, repeat.var = "admin_1", numbers = as.numeric(str_remove(percent_1, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin1_2 <- borda_admin1%>%
select(question_2, rank_2, percent_2, repeat_var, disaggregation)%>%
mutate(dependent.var =question_2, dependent.var.value = rank_2, independent.var="total", independent.var.value = "total",
repeat.var.value = repeat_var, repeat.var = "admin_1", numbers = as.numeric(str_remove(percent_2, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin1_3 <- borda_admin1%>%
select(question_3, rank_3, percent_3, repeat_var, disaggregation)%>%
mutate(dependent.var =question_3, dependent.var.value = rank_3, independent.var="total", independent.var.value = "total",
repeat.var.value = repeat_var, repeat.var = "admin_1", numbers = as.numeric(str_remove(percent_3, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin1 <- borda_admin1_1%>%
bind_rows(borda_admin1_2, borda_admin1_3)
### admin1 grp
borda_admin1_grp_all <- borda_admin1_grp%>%
separate(vars, into = c("question_1", "question_2", "question_3"), sep = " ")
borda_admin1_grp_1 <- borda_admin1_grp_all%>%
select(question_1, rank_1, percent_1, repeat_var, disaggregation)%>%
mutate(dependent.var =question_1, dependent.var.value = rank_1, independent.var="ig_8_statut_groupe", independent.var.value = disaggregation,
repeat.var.value = repeat_var, repeat.var = "admin_1", numbers = as.numeric(str_remove(percent_1, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin1_grp_2 <- borda_admin1_grp_all%>%
select(question_2, rank_2, percent_2, repeat_var, disaggregation)%>%
mutate(dependent.var =question_2, dependent.var.value = rank_2, independent.var="ig_8_statut_groupe", independent.var.value = disaggregation,
repeat.var.value = repeat_var, repeat.var = "admin_1", numbers = as.numeric(str_remove(percent_2, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin1_grp_3 <- borda_admin1_grp_all%>%
select(question_3, rank_3, percent_3, repeat_var, disaggregation)%>%
mutate(dependent.var =question_3, dependent.var.value = rank_3, independent.var="ig_8_statut_groupe", independent.var.value = disaggregation,
repeat.var.value = repeat_var, repeat.var = "admin_1", numbers = as.numeric(str_remove(percent_3, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin1_grp <- borda_admin1_grp_1%>%
bind_rows(borda_admin1_grp_2, borda_admin1_grp_3)
final_admin1_allborda <- borda_admin1 %>%
bind_rows(borda_admin1_grp)
write.csv(final_admin1_allborda, paste0("./output/borda/admin_1_all_borda_aggregation", format(Sys.time(), "%Y%m%d"),".csv"))
borda_admin2 <- borda_admin2%>%
separate(vars, into = c("question_1", "question_2", "question_3"), sep = " ")
borda_admin2_1 <- borda_admin2%>%
select(question_1, rank_1, percent_1, repeat_var, disaggregation)%>%
mutate(dependent.var =question_1, dependent.var.value = rank_1, independent.var="total", independent.var.value = "total",
repeat.var.value = repeat_var, repeat.var = "admin_2", numbers = as.numeric(str_remove(percent_1, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin2_2 <- borda_admin2%>%
select(question_2, rank_2, percent_2, repeat_var, disaggregation)%>%
mutate(dependent.var =question_2, dependent.var.value = rank_2, independent.var="total", independent.var.value = "total",
repeat.var.value = repeat_var, repeat.var = "admin_2", numbers = as.numeric(str_remove(percent_2, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin2_3 <- borda_admin2%>%
select(question_3, rank_3, percent_3, repeat_var, disaggregation)%>%
mutate(dependent.var =question_3, dependent.var.value = rank_3, independent.var="total", independent.var.value = "total",
repeat.var.value = repeat_var, repeat.var = "admin_2", numbers = as.numeric(str_remove(percent_3, "%"))/100
)%>%
select(dependent.var, dependent.var.value, independent.var, independent.var.value, repeat.var, repeat.var.value, numbers)
borda_admin2 <- borda_admin2_1%>%
bind_rows(borda_admin2_2, borda_admin2_3)
final_admin2_allborda <- borda_admin2
write.csv(final_admin2_allborda, paste0("./output/borda/admin_2_all_borda_aggregation", format(Sys.time(), "%Y%m%d"),".csv"))
# setup
library(dplyr)
library(readr)
library(tidyr)
# install.packages("koboquest")
library(koboquest) # manage kobo questionnairs
library(parallel) # mclapply
library(kobostandards) # check inputs for inconsistencies
# devtools::install_github('mabafaba/kobostandards')
library(xlsformfill) # generate fake data for kobo
# devtools::install_github('mabafaba/xlsformfill')
library(hypegrammaR) # stats 4 complex samples
# install.packages(c("curl", "httr"))
# install.packages("digest")
# devtools::install_github('ellieallien/hypegrammaR', host = "https://api.github.com", dependencies=TRUE)
# devtools::install_github('mabafaba/hypegrammaR')
# install.packages("curl")
library(curl)
library(httr)
library(composr) # horziontal operations
#devtools::install_github('mabafaba/composr')
library(parallel)
library(knitr)
library(surveyweig
library(stringr)
library(srvyr)
#source("functions/to_alphanumeric_lowercase.R") # function to standardise column headers (like check.names)
source("functions/analysisplan_factory.R")  # generate analysis plans
source("functions/remove_responses_from_sumstat.R")  # generate analysis plans
source("functions/format_hypothesis_test.R")
### source("SOME_NGA_SPECIFIC_FUNCTIONS")
# load questionnaire inputs
questions <- read.csv("input/questionnaire_kobo_hh_combine_v4_FINAL_PourAnalyse_survey.csv",
stringsAsFactors=F, check.names = F, encoding = "UTF-8")
choices <- read.csv("input/questionnaire_kobo_hh_combine_v4_FINAL_PourAnalyse_choices.csv",
stringsAsFactors=F, check.names = F, encoding = "UTF-8")
choices$name <- gsub('[^ -~]', '', choices$name)
questions$name <- gsub('[^ -~]', '', questions$name)
questions$name <- tolower(questions$name)
## CAREFUL : have some " " at the end of some options. Replace them with nothing :
choices$list_name %<>% gsub(" ", "", .)
## CAREFUL : have some " " at the end of some options. Replace them with nothing :
choices$list_name
# test with hh loop added (need to run "loop_cleaning.R" file)
response <- read.csv("output/MSNA_HH_Analysed_data20191211.csv", stringsAsFactors = F, encoding = "UTF-8")
View(response)
response$mssc_2_source_rev_1
response$mssc_2_source_rev_1 <- gsub("[^ -~]", "", response$mssc_2_source_rev_1)
response$mssc_2_source_rev_2 <- gsub("[^ -~]", "", response$mssc_2_source_rev_2)
response$mssc_2_source_rev_3 <- gsub("[^ -~]", "", response$mssc_2_source_rev_3)
response$aap_1_source_confiance <- gsub("[^ -~]", "", response$aap_1_source_confiance)
response$aap_3_canal_information <- gsub("[^ -~]", "", response$aap_3_canal_information)
to_alphanumeric_lowercase <-
function(x){tolower(gsub("[^a-zA-Z0-9_]", "\\.", x))}
names(response)<-to_alphanumeric_lowercase(names(response))
questionnaire <- load_questionnaire(data = response,
questions = questions,
choices = choices)
unwanted_cols <- unique(tolower(c("x","start", "end", "today", "q0_2_date", "consensus_note", "village",  "q0_1_enqueteur","village_autre", "ig_11_IDP_RtL_autre",
"ig_14_IDP_cond_retour_autre","ig_16_Ret_Rapat_abri_origine_non_raison_autre", "ig_15_IDP_RtR_Ret_Rapat_autre",
"sante_1_accouch_autre","sante_1_accouch_maison_autre","sante_2_soin_recu_autre",
"sante_3_soin_non_recu_autre","sante_4_0_4_malades_autre",  "sante_5_5plus_malades_autre",
"educ_4_handi_acces_autre",   "protect_10_autre",           "educ_5_ecole_acces_autre",
"nfi_2_1_type_abri_autre",    "nfi_propr_abri_autre",       "mssc_2_source_rev_autre",
"mssc_4_dep_6M_autre","secal_6_agric_raisons_autre","wash_1_source_boisson_autre",
"wash_2_source_autre_usage_autre", "wash_9_insuff_raisons_certains_groupes_autre",  "wash_9_insuff_raisons_autre",
"wash_15_insuff_raisons_certains_groupes_autre", "wash_15_insuff_raisons_autre","wash_20_autres_autre",
"sante_5_deces_relation_autre", "sante_5_deces_cause_autre",  "protect_2_femmes_risque_autre",
"protect_2_hommes_risque_autre","protect_3_filles_risque_autre","protect_3_garcons_risque_autre",
"protect_5_1_travail_force_autre", "protect_8_2_autre","protect_13_autre",
"aap_1_1_source_confiance_autre", "aap_2_1_type_information_autre", "aap_3_canal_information_enpersonne",
"aap_3_canal_information_autre", "aap_4_retour_fournisseurs_aide_autre", "educ_6_reponse_autre",
"nfi_7_assistance_autre",     "secal_13_reponse_autre",     "wash_22_autres_autre",
"sante_7_reponse_autre",      "note_comm_end", "sante_1_accouch_maison_raison_autre", "sum_sante_1_accouch_autre"
)))
isnot_inquestionnaire <- names(response)[!names(response) %in% tolower(questions$name)]
isnot_inquestionnaire <- isnot_inquestionnaire[!isnot_inquestionnaire %in% unwanted_cols]
isnot_inquestionnaire <-  isnot_inquestionnaire[!questionnaire$question_is_sm_choice(isnot_inquestionnaire)]
message(paste(isnot_inquestionnaire, collapse = " \n"), " \n\n Those are re not in the questionnaire. Add them if you want to consider them")
# regroup Retourn? & Rapatri? as one category:
response$ig_8_statut_groupe <-  recode(response$ig_8_statut_groupe,
retourne = "retourne_rapatrie",
rapatrie = "retourne_rapatrie")
# generate the stratification samplingframe
sampling.frame <- load_samplingframe(file = "input/sampling_fr_strata_v3.csv")
sampling.frame$population = gsub(",", "", sampling.frame$population)
sampling.frame = sampling.frame[!is.na(sampling.frame$population),]
sampling.frame$population %<>% as.numeric
## From sampling frame -> no IDP en site sur Bangui... Remplacer par IDP FA
response$stratum_column <- paste(response$admin_2, response$ig_8_statut_groupe, sep = "_")
# More cleaning to harmonize
response$stratum_column %<>% gsub("-", "_", .)
sampling.frame$stratum %<>% gsub("-", "_", .)
# delete data from responses that are not in the sampling frame:
response_strat <- response[(response$stratum_column %in% sampling.frame$stratum),]
response_strat$clusters <- NA
#sampling.frame$strata
weighting_sf <- map_to_weighting(sampling.frame = sampling.frame,
data = response_strat,
sampling.frame.population.column ="population",
sampling.frame.stratum.column = "stratum",
data.stratum.column = "stratum_column")
library(dplyr)
library(readr)
library(tidyr)
# install.packages("koboquest")
library(koboquest) # manage kobo questionnairs
library(parallel) # mclapply
library(kobostandards) # check inputs for inconsistencies
# devtools::install_github('mabafaba/kobostandards')
library(xlsformfill) # generate fake data for kobo
# devtools::install_github('mabafaba/xlsformfill')
library(hypegrammaR) # stats 4 complex samples
# install.packages(c("curl", "httr"))
# install.packages("digest")
# devtools::install_github('ellieallien/hypegrammaR', host = "https://api.github.com", dependencies=TRUE)
# devtools::install_github('mabafaba/hypegrammaR')
# install.packages("curl")
library(curl)
library(httr)
library(composr) # horziontal operations
#devtools::install_github('mabafaba/composr')
library(parallel)
library(knitr)
library(surveyweights)
library(stringr)
library(srvyr)
#source("functions/to_alphanumeric_lowercase.R") # function to standardise column headers (like check.names)
source("functions/analysisplan_factory.R")  # generate analysis plans
source("functions/remove_responses_from_sumstat.R")  # generate analysis plans
source("functions/format_hypothesis_test.R")
# load questionnaire inputs
questions <- read.csv("input/questionnaire_kobo_hh_combine_v4_FINAL_PourAnalyse_survey.csv",
stringsAsFactors=F, check.names = F, encoding = "UTF-8")
choices <- read.csv("input/questionnaire_kobo_hh_combine_v4_FINAL_PourAnalyse_choices.csv",
stringsAsFactors=F, check.names = F, encoding = "UTF-8")
choices$name <- gsub('[^ -~]', '', choices$name)
questions$name <- gsub('[^ -~]', '', questions$name)
questions$name <- tolower(questions$name)
## CAREFUL : have some " " at the end of some options. Replace them with nothing :
choices$list_name %<>% gsub(" ", "", .)
# test with hh loop added (need to run "loop_cleaning.R" file)
response <- read.csv("output/MSNA_HH_Analysed_data20191212.csv", stringsAsFactors = F, encoding = "UTF-8")
# load questionnaire inputs
questions <- read.csv("input/questionnaire_kobo_hh_combine_v4_FINAL_PourAnalyse_survey.csv",
stringsAsFactors=F, check.names = F, encoding = "UTF-8")
choices <- read.csv("input/questionnaire_kobo_hh_combine_v4_FINAL_PourAnalyse_choices.csv",
stringsAsFactors=F, check.names = F, encoding = "UTF-8")
choices$name <- gsub('[^ -~]', '', choices$name)
questions$name <- gsub('[^ -~]', '', questions$name)
questions$name <- tolower(questions$name)
## CAREFUL : have some " " at the end of some options. Replace them with nothing :
choices$list_name %<>% gsub(" ", "", .)
# test with hh loop added (need to run "loop_cleaning.R" file)
response <- read.csv("output/MSNA_HH_Analysed_data20191211.csv", stringsAsFactors = F, encoding = "UTF-8")
